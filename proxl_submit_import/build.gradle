/*
 * run importer for submitted imports
 
 	Build Runnable Jar for Importer
 
 		defaultTasks 'shadowJar'
 */


/*
    Build executable jar file with gradle shadowJar
    More info at: https://imperceptiblethoughts.com/shadow/
    
    Requires Gradle 5+
 */
 
 	
	//  http://ajoberstar.org/grgit/grgit-gradle.html
	// Grgit: Generally, you should only apply the plugin to the root project of your build.
	//  Plugin adds grgit property to your build, which is an instance of Grgit.
	//     Plugin looks for .git directory in build directory and it's parents
 
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.ajoberstar.grgit:grgit-gradle:3.1.1"
  }
}

plugins {
	id 'com.github.johnrengelman.shadow' version '5.0.0'
	//  moved to 'buildscript'. See Notes above	id 'org.ajoberstar.grgit' version '3.1.1'
}

apply plugin: 'java'

apply plugin: "org.ajoberstar.grgit"

sourceCompatibility = 1.8      //    defaults to currently installed JVM
// targetCompatibility  = 1.8  //    defaults to sourceCompatibility

repositories {
    mavenCentral()
    jcenter()
}

//  Set default task for this build.gradle file
defaultTasks 'shadowJar'

dependencies {
	
	//  Logging
	
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.15.0'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.15.0'	
	
	// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
	compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.15.0'
	
	//  Jakarta Commons Logging to SLF4J
	compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
	
	//  Log4j 1 to 2 bridge
	compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.2'
	
	
	//  New StringUtils
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
	
	
	
	//   Apache HTPP Client

	// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.8'

	// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore
	compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.11'
 	

	//  Jackson JSON parsing
	
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.9'
	
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'


	//  NOT FOUND  either jcenter() or mavenCentral()
	
	//     Took Gradle listing from https://mvnrepository.com/artifact/jargs/jargs/1.0
    // https://mvnrepository.com/artifact/jargs/jargs
//	compile group: 'jargs', name: 'jargs', version: '1.0'

	//  jargs.jar
	compile fileTree(dir: 'lib', include: ['*.jar'])
	
}

//  Assign to grgit, created by plugin
def gitRepo = grgit


// def gitRepo = Grgit.open({
//  dir = ".."  //  Use parent directory since that is root of GIT repo
//  currentDir = <path>
//  credentials = <credentals>
// })


def gitHeadId = gitRepo.head().id
def gitCommit = gitRepo.head().getAbbreviatedId(8)
def gitBranch = gitRepo.branch.getCurrent().getName()

//  Get tag at GIT HEAD: like git tag --points-at HEAD
def repoHead = gitRepo.head()
def repoHeadTag = gitRepo.tag.list().find {
	it.commit == repoHead
}
def repoTagName = "NO GIT Tag at HEAD"

if ( repoHeadTag ) {
	println("GIT Tag at HEAD found")
	repoTagName = repoHeadTag.getName()
}


println("gitHeadId: " + gitHeadId )
println("gitCommit: " + gitCommit )
println("gitBranch: " + gitBranch )
println("GIT Tag at HEAD: " + repoTagName )

jar {
    manifest {
        attributes ('Main-Class': 'org.yeastrc.proxl.import_xml_to_db_submit_pgm.program.SubmitProxlImportProgram')
        attributes([ 'Project-Title': project.name,
					'Build-Timestamp': new Date().format("yyyy-MM-dd HH:mm:ssZ"),
					'Git-Commit': gitCommit,
					'GIT-Full-HASH': gitHeadId,
					'GIT-Tag-at-HEAD': repoTagName,
					'Git-Branch': gitBranch ])
    }
}

//  For creating runnable jar
processResources {
    from ('src/main/resources') {
        include '**/*'
    }
}

shadowJar {
    baseName = 'submitProxlXMLImport'
    classifier = null
    version = null
}