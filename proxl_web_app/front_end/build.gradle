/*
 * Build Front End of proxl web app
 *
 	Builds Front End and then copies results for inclusion in main webapp build under:
 	    ../src/main/webapp/static/js_generated_bundles
	    ../src/main/webapp/static/css_generated
 	
 	Default task:

		defaultTasks 'frontEndBuild'
 
 */
 
 //  New way to import gradle plugin for node:  per https://plugins.gradle.org/plugin/com.moowork.node

/* 
 plugins {
  id "com.moowork.node" version "1.2.0"
} 
 */
 
// import com.moowork.gradle.node.task.NodeTask

buildscript {
    repositories {
        mavenCentral()
         jcenter()
         
      maven {
     	 url "https://plugins.gradle.org/m2/"
    	}
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

apply plugin: "com.moowork.node"


apply plugin: 'eclipse'
// apply plugin: 'idea'



repositories {
    mavenCentral()
}

dependencies {

}


defaultTasks 'frontEndBuild'


/*
 * Clean up, remove output directories.  Removes some that are not deleted in task 'delete_outputDirs'
 * working directory: The directory this build.gradle file is in
 * 
 * !!!!  This task is only executed from build all ant script at project/repo root.
 */
task clean(type: Delete) {
  doFirst {	
  	println("clean::doFirst called.  Deleting build output directories, including 'handlebars_templates_precompiled'")
  	  
	   delete 'handlebars_templates_precompiled'
	   delete 'webpack_build_output'
	   delete '../src/main/webapp/static/js_generated_bundles'
	   delete '../src/main/webapp/static/css_generated'
   }
}

/*
 * working directory: emozi-webapp/front_end
 */
task delete_outputDirs(type: Delete) {
  doFirst {	
  	println("delete_outputDirs::doFirst called.  Deleting most build output directories, except 'handlebars_templates_precompiled'")
  	  
     //  No longer delete since added build avoidance input dir and output file
	   // delete 'handlebars_templates_precompiled'

	   delete 'webpack_build_output'
	   delete '../src/main/webapp/static/js_generated_bundles'
	   delete '../src/main/webapp/static/css_generated'
   }
}

//  Create all createHandlebarsOutputDirs

task createHandlebarsOutputDirs { 
  println("createHandlebarsOutputDirs called")
  doFirst {	
  	  println("createHandlebarsOutputDirs::doFirst called")
  	  
  	  String rootDir = "handlebars_templates_precompiled/"
  	  
  	  String dirToCreate = ""
  	  boolean mkdirSuccess = false;
  	  
  	  dirToCreate = rootDir
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()

  	  dirToCreate = rootDir + "image_structure_pages_shared"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "merged_pages_shared"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "peptide_page"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "protein_page"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "protein_pages_coverage_report_shared"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "protein_pages_coverage_report_image_structure_pages_shared"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "mod_view_page"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()

      dirToCreate = rootDir + "common"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "save_view"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "protein_sequence_formatted_display"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "search_detail_section_main_page"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "search_detail_section_user_input_section"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "psm_list"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "lorikeet_overlay"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page__project_info_section_all_users_interaction"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page__project_info_section_logged_in_users_interaction"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page_searches_section_all_users_interaction"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page_searches_section_researcher_user_interaction"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page_upload_data_section_project_owner_user_interaction"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page__saved_views_section"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	    	  
  	  dirToCreate = rootDir + "project_page__saved_views_section"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page__share_data_section_loggedin_users"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page__ann_cutoff_defaults_project_level"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_list"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "user_account_create_account"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "user_account_login_forgot_password"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "user_invite_processing"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "dummy_template"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
	}
}

//  Handlebars Precompile for input handlebars_templates/image_structure_pages_shared

task handlebarsPrecompile_image_structure_pages_shared(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/image_structure_pages_shared"
  def precompile_Output_File = "handlebars_templates_precompiled/image_structure_pages_shared/image_structure_pages_shared_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}


//  Handlebars Precompile for input handlebars_templates/merged_pages_shared

task handlebarsPrecompile_merged_pages_shared(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/merged_pages_shared"
  def precompile_Output_File = "handlebars_templates_precompiled/merged_pages_shared/merged_pages_shared_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/peptide_page

task handlebarsPrecompile_peptide_page(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/peptide_page"
  def precompile_Output_File = "handlebars_templates_precompiled/peptide_page/peptide_page_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/protein_page

task handlebarsPrecompile_protein_page(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/protein_page"
  def precompile_Output_File = "handlebars_templates_precompiled/protein_page/protein_page_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/protein_pages_coverage_report_shared

task handlebarsPrecompile_protein_pages_coverage_report_shared(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/protein_pages_coverage_report_shared"
  def precompile_Output_File = "handlebars_templates_precompiled/protein_pages_coverage_report_shared/protein_pages_coverage_report_shared_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/protein_pages_coverage_report_image_structure_pages_shared

task handlebarsPrecompile_protein_pages_coverage_report_image_structure_pages_shared(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/protein_pages_coverage_report_image_structure_pages_shared"
  def precompile_Output_File = "handlebars_templates_precompiled/protein_pages_coverage_report_image_structure_pages_shared/protein_pages_coverage_report_image_structure_pages_shared_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/mod_view_page

task handlebarsPrecompile_mod_view_page(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/mod_view_page"
  def precompile_Output_File = "handlebars_templates_precompiled/mod_view_page/mod_view_page_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/common
task handlebarsPrecompile_common(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/common"
  def precompile_Output_File = "handlebars_templates_precompiled/common/common_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/save_view
task handlebarsPrecompile_save_view(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/save_view"
  def precompile_Output_File = "handlebars_templates_precompiled/save_view/save_view_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/protein_sequence_formatted_display

task handlebarsPrecompile_protein_sequence_formatted_display(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/protein_sequence_formatted_display"
  def precompile_Output_File = "handlebars_templates_precompiled/protein_sequence_formatted_display/protein_sequence_formatted_display_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/search_detail_section_main_page

task handlebarsPrecompile_search_detail_section_main_page(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/search_detail_section_main_page"
  def precompile_Output_File = "handlebars_templates_precompiled/search_detail_section_main_page/search_detail_section_main_page_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}


//  Handlebars Precompile for input handlebars_templates/search_detail_section_user_input_section

task handlebarsPrecompile_search_detail_section_user_input_section(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/search_detail_section_user_input_section"
  def precompile_Output_File = "handlebars_templates_precompiled/search_detail_section_user_input_section/search_detail_section_user_input_section_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}


  
//  Handlebars Precompile for input handlebars_templates/psm_list

task handlebarsPrecompile_psm_list(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/psm_list"
  def precompile_Output_File = "handlebars_templates_precompiled/psm_list/psm_list_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/lorikeet_overlay

task handlebarsPrecompile_lorikeet_overlay(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/lorikeet_overlay"
  def precompile_Output_File = "handlebars_templates_precompiled/lorikeet_overlay/lorikeet_overlay_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page__project_info_section_all_users_interaction

task handlebarsPrecompile_project_page__project_info_section_all_users_interaction(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page__project_info_section_all_users_interaction"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page__project_info_section_all_users_interaction/project_page__project_info_section_all_users_interaction_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page__project_info_section_logged_in_users_interaction

task handlebarsPrecompile_project_page__project_info_section_logged_in_users_interaction(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page__project_info_section_logged_in_users_interaction"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page__project_info_section_logged_in_users_interaction/project_page__project_info_section_logged_in_users_interaction_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page_searches_section_all_users_interaction

task handlebarsPrecompile_project_page_searches_section_all_users_interaction(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page_searches_section_all_users_interaction"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page_searches_section_all_users_interaction/project_page_searches_section_all_users_interaction_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page_searches_section_researcher_user_interaction

task handlebarsPrecompile_project_page_searches_section_researcher_user_interaction(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page_searches_section_researcher_user_interaction"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page_searches_section_researcher_user_interaction/project_page_searches_section_researcher_user_interaction_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page_upload_data_section_project_owner_user_interaction

task handlebarsPrecompile_project_page_upload_data_section_project_owner_user_interaction(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page_upload_data_section_project_owner_user_interaction"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page_upload_data_section_project_owner_user_interaction/project_page_upload_data_section_project_owner_user_interaction_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page__saved_views_section

task handlebarsPrecompile_project_page__saved_views_section(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page__saved_views_section"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page__saved_views_section/project_page__saved_views_section_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page__saved_views_section_loggedin_users

task handlebarsPrecompile_project_page__saved_views_section_loggedin_users(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page__saved_views_section_loggedin_users"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page__saved_views_section_loggedin_users/project_page__saved_views_section_loggedin_users_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page__share_data_section_loggedin_users

task handlebarsPrecompile_project_page__share_data_section_loggedin_users(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page__share_data_section_loggedin_users"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page__share_data_section_loggedin_users/project_page__share_data_section_loggedin_users_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page__ann_cutoff_defaults_project_level

task handlebarsPrecompile_project_page__ann_cutoff_defaults_project_level(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page__ann_cutoff_defaults_project_level"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page__ann_cutoff_defaults_project_level/project_page__ann_cutoff_defaults_project_level_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_list

task handlebarsPrecompile_project_list(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_list"
  def precompile_Output_File = "handlebars_templates_precompiled/project_list/project_list_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/user_account_create_account

task handlebarsPrecompile_user_account_create_account(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/user_account_create_account"
  def precompile_Output_File = "handlebars_templates_precompiled/user_account_create_account/user_account_create_account_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/user_account_login_forgot_password

task handlebarsPrecompile_user_account_login_forgot_password(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/user_account_login_forgot_password"
  def precompile_Output_File = "handlebars_templates_precompiled/user_account_login_forgot_password/user_account_login_forgot_password_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/user_invite_processing

task handlebarsPrecompile_user_invite_processing(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/user_invite_processing"
  def precompile_Output_File = "handlebars_templates_precompiled/user_invite_processing/user_invite_processing_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/dummy_template

task handlebarsPrecompile_dummy_template(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/dummy_template"
  def precompile_Output_File = "handlebars_templates_precompiled/dummy_template/dummy_template_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', 'handlebars_templates_precompiled/dummy_template/dummy_template_template-bundle.js',
   'handlebars_templates/dummy_template'
   ]
}

//  Change so dev runs  'npm install' separately since it takes so long

task webpack(type: NodeTask ) { //  , dependsOn: 'npmInstall') {

	println("Starting  task webpack(type: NodeTask ) ")

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/webpack/bin/webpack.js')
  } else {
    script = project.file('node_modules/.bin/webpack')
  }
  //  specify mode development, defaults to production
  args = [ '--mode=development' ] // --mode=development does no minification
}

/*
	does a copy into where the Gradle WAR processing expects it
*/
task copyFrontEndJS(type: Sync) {
    from "webpack_build_output/js_generated_bundles"
    into "../src/main/webapp/static/js_generated_bundles"
}

task copyFrontEndCSS(type: Sync) {
    from "webpack_build_output/css_generated"
    into "../src/main/webapp/static/css_generated"
}


task frontEndBuild(type: GradleBuild) {
   tasks = [ 
     'delete_outputDirs', 
     'createHandlebarsOutputDirs', 
     'handlebarsPrecompile_project_page__share_data_section_loggedin_users',
     'handlebarsPrecompile_project_page__saved_views_section',
     'handlebarsPrecompile_project_page__saved_views_section_loggedin_users',
     'handlebarsPrecompile_project_page__ann_cutoff_defaults_project_level',
     'handlebarsPrecompile_save_view',
     'handlebarsPrecompile_image_structure_pages_shared',
     'handlebarsPrecompile_merged_pages_shared',
     'handlebarsPrecompile_peptide_page',
     'handlebarsPrecompile_protein_page',
     'handlebarsPrecompile_protein_pages_coverage_report_shared',
     'handlebarsPrecompile_protein_pages_coverage_report_image_structure_pages_shared',
     'webpack',
     'copyFrontEndJS',
     'copyFrontEndCSS'
   ]
}



// task copyFrontEnd(type: Sync) { // , dependsOn: 'webpack') {
//    from "FrontEnd/webapp_prebuild"
//    into "src/main/webapp"
// }

// processResources.dependsOn 'copyFrontEnd' //  'webpack'

// clean.delete << file('node_modules')
// clean.delete << file('src/main/webapp/dist')



